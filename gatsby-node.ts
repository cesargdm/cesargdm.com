import path from 'path'

import slugify from 'slugify'
import fetch from 'node-fetch'

import 'dotenv/config'

const postTemplate = path.resolve(`./src/templates/Post.tsx`)
const projectTemplate = path.resolve(`./src/templates/Project.tsx`)

exports.createPages = async ({ graphql, actions, reporter }: any) => {
	// Destructure the createPage function from the actions object
	const { createPage } = actions

	const allMdxPagesResult = await graphql(`
    query allMdxPages {
      allMdx {
        edges {
          node {
            id
            frontmatter {
              title
              type
            }
            internal {
              contentFilePath
            }
          }
        }
      }
    }
  `)

	if (allMdxPagesResult.errors) {
		reporter.panicOnBuild('ðŸš¨  ERROR: Loading "createPages" query')
	}

	const posts = allMdxPagesResult.data.allMdx.edges

	posts.forEach(({ node }: any) => {
		const { title, type } = node.frontmatter ?? {}

		if (!title || !type) {
			console.error(`Skipping blog post with no title or type: ${node.id}`)
			return
		}

		console.log({type})

		createPage({
			// The slug generated by gatsby-plugin-mdx doesn't contain a slash at the beginning
			// You can prepend it with any prefix you want
			path: `/${type}/${slugify(node.frontmatter.title, {
				lower: true,
				strict: true,
			})}/`,
			// This component will wrap our MDX content
			component: `${
				type === 'blog' ? postTemplate : projectTemplate
			}?__contentFilePath=${node.internal.contentFilePath}`,

			// You can use the values in this context in
			// our page layout component
			context: { id: node.id },
		})
	})
}

// Source nodes

export const sourceNodes = async ({
	actions: { createNode },
	createContentDigest,
}: any) => {
	const allMdxPagesResult = (await fetch(
		`https://api.opensea.io/api/v1/assets?owner=0xE3a856E4034D25FF68b3702B8f1618173BBFa130`,
		{
			method: 'GET',
			headers: {
				'X-API-KEY': process.env.OPENSEA_API_KEY as string,
			},
		},
	).then((res) => res.json())) as {
		assets: {
			name: string
			last_sale: number
			description: string
			permalink: string
			image_url: string
			id: string
		}[]
	}

	allMdxPagesResult?.assets.forEach((token) => {
		createNode({
			name: token.name,
			lastSale: Number(token.last_sale || 0),
			description: token.description,
			permalink: token.permalink,
			imageUrl: token.image_url,
			// required fields
			id: String(token.id),
			parent: 'allNfts',
			children: [],
			internal: {
				type: `Nft`,
				contentDigest: createContentDigest(token),
			},
		})
	})
}
